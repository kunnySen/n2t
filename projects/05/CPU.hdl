// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
Mux16(a=instruction,b=ALUout,sel=instruction[0],out=MUXout);
ARegister(in=MUXout,load=instruction[10],out=Aout);
Mux16(a=Aout,b=inM,sel=instruction[3],out=AM);
DRegister(in=ALUout,load=instruction[11],out=Dout);
ALU(x=Dout,y=AM,zx=instruction[4],nx=instruction[5],zy=instruction[6],
ny=instruction[7],f=instruction[8],no=instruction[9],out=ALUout,zr=zr,ng=ng);

And(a=zr,b=instruction[14],out=and1);
And(a=ng,b=instruction[13],out=and2);
Or(a=and1,b=and2,out=or1);
Not(in=zr,out=NOTzr);
Not(in=ng,out=NOTng);
And(a=NOTzr,b=NOTng,out=and3);
And(a=and3,b=instruction[15],out=and4);
Or(a=or1,b=and4,out=pcload);

PC(in=Aout,load=pcload,inc=true,reset=reset,out[1..15]=pc);
And(a=true,b=instruction[12],out=writeM);
And16(a=true,b=Aout,out[1..15]=addressM);
}